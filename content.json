{"pages":[{"title":"哥们在这给你写文","text":"李唐顶珍","link":"/blog/about/index.html"}],"posts":[{"title":"博客搭建记录","text":"采用 github Pages + Hexo 搭建主题使用 Icarus 使用手册常用命令 123hexo d -ghexo new post Icarus消息框模板 配置过程首先配hexo，在 _config.yml 中修改permalink: &quot;:category/:name/&quot;会使生成的链接更好看 主题使用的是hexo的icarus，配置相关的帖子没有很多。 三栏改两栏等众多优化 Tags和category url ICARUS官网 Hexo Icarus主题配置完全手册 hexo默认使用html的more注释实现首页展示文章的折叠，在根目录的scaffolds/post修改默认post的模板: 12345678910---title: {{ title }}date: {{ date }}toc: truetags:categories:---&lt;!--more--&gt; About页面 目前仍不知怎么配置公式渲染测试 This is inline expression: $ax^2+bx+c&gt;0$. This is a block expression:$$\\displaystyle \\frac{1}{\\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\\frac25 \\pi}} =1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {1+\\frac{e^{-6\\pi}}{1+\\frac{e^{-8\\pi}} {1+\\cdots} } } }$$ Or use $LaTeX$ environment: \\begin{equation} A = \\begin{bmatrix} a & b \\\\ c & c \\end{bmatrix} \\end{equation}","link":"/blog/Blog/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"},{"title":"C++","text":"给被派森和js狂暴鸿儒的大脑复习下cpp😪 多少掺点C++11 未分类官方题解用++i更多，因为i++先赋值后运算，多生成一个局部对象，++i的效率比i++高， 1234567891011CDemo CDemo::operator++ (){ //前置++ ++n; return *this;}CDemo CDemo::operator ++(int k){ //后置++ CDemo tmp(*this); //记录修改前的对象 n++; return tmp; //返回修改前的对象} STLVectorvector容器在做形参传递时，有三种方式： 123void init_vector1(vector&lt;int&gt;vectest);void init_vector2(vector&lt;int&gt;&amp;vectest);void init_vector3(vector&lt;int&gt;*vectest); 第一种为值传递，实参复制第二三分别为引用传递和指针传递，会对实参做出影响。实际应用时建议采用引用传递。 哈希表哈希表是一个采用键值和值相互对应的函数，在c++中，与哈希表对应的容器是unordered_map（无序容器）。因此采用unordered_map建立哈希表。 12auto it = hashtable.find(target - nums[i]); find(key)是unordered_map容器中寻找键key对应的值的成员方法。若键key与其值的键值对在容器中存在，则返回一个指向该键值对的正向迭代器，反之则返回一个指向容器中最后一个键值对之后位置的迭代器。 1if(it != hashtable.end()) 成员方法end()生成指向容器中最后一个键值对之后位置的迭代器。 迭代器iterator迭代器根据访问方式分为正向迭代器、双向迭代器、随机访问迭代器。不同的访问方式使得迭代器可以做的运算不同。 迭代器常用功能： 12345678910111213//1、定义一个正向迭代器//容器类名::iterator 迭代器名;vector&lt;int&gt;::iterator i; //2、取得迭代器所指元素a = *i;//3、移动迭代器，访问下一个元素（移动方法视迭代器类别变化）++i;//在unordered_map容器中，迭代器指向键值对，即指向两个元素，键和值。//因此通过迭代器访问unordered_map容器时，需要说明访问的是哪个元素。其中first是键，second是值。return {it-&gt;second,i};//上句即为访问键值对中的值。 在 C++11 标准下，相比 NULL 和 0，使用 nullptr 初始化空指针可以令我们编写的程序更加健壮。","link":"/blog/language/backtoCpp/"},{"title":"leetcode","text":"不摆烂式刷leetcode，每天更新😪","link":"/blog/DSA/leetcode/"},{"title":"2022实训记录","text":"记录使用vue3+vite+tailwindCSS技术栈的前端开发 本来计划用ts，由于vue3+vite的学习成本高于预期，因此还是用js。 项目配置vite配置TailwindCSS,在tailwind.config.js 文件里配置，配置后可以使用bg-primary 1234567891011content: [ &quot;./index.html&quot;, &quot;./src/**/*.{vue,js,ts,jsx,tsx}&quot;,],theme: { extend: { colors:{ primary:'#BCCEFB' } },}, 静态页面部署到Github Pages利用github pages部署前端页面配置vite.config.js的basevite打包生成dist文件夹，将dist文件夹下的所有文件放在gh-pages分支里注意查看 .gitignore 里有没有/dist，否则git推不上利用ApiPost自带的Mock服务测试可以正常发送axios请求。 需要注意的是，base的值在配置vue-router的时候也需要使用，history模式的路由函数传入base的值 后端的挣扎：配环境Python我测你们码","link":"/blog/frontend/vue/yxhyRecord/"},{"title":"frontendResources","text":"前端好用的轮子 组件库HeadlessUI基于Tailwind CSS 都是比较常用的小组件，但还是不太全 tailwindui","link":"/blog/uncategorized/frontendResources/"},{"title":"算法比赛中的无穷大","text":"Leetcode 题解中用了 INT_MAX 作为无穷大，让我想起了之前看到过的 0x3F3F3F3F 为什么算法比赛里常常使用memset设置这个数为无穷大数捏？ 对于int类型的数，有的人会采用INT_MAX，即0x7fffffff作为无穷大。但是以INT_MAX为无穷大 很多时候我们并不只是单纯拿无穷大来作比较，而是会运算后再做比较，例如在大部分最短路径算法中都会使用的松弛操作：if (d[u]+w[u][v]&lt;d[v]) d[v]=d[u]+w[u][v];我们知道如果u,v之间没有边，那么w[u][v]=INF，如果我们的INF取0x7fffffff，那么d[u]+w[u][v]会溢出而变成负数，我们的松弛操作便出错了，更一般的说，0x7fffffff不能满足“无穷大加一个有穷的数依然是无穷大”，它变成了一个很小的负数。 除了要满足加上一个常数依然是无穷大之外，我们的常量还应该满足“无穷大加无穷大依然是无穷大”，至少两个无穷大相加不应该出现灾难性的错误，这一点上0x7fffffff依然不能满足我们。而这种情况在动态规划，或者其他一些递推的算法中常常出现，很有可能导致算法出问题。 所以在算法竞赛中，我们常采用0x3f3f3f3f来作为无穷大。0x3f3f3f3f主要有如下好处： 0x3f3f3f3f的十进制为1061109567，和 INT_MAX 一个数量级，即 $10^9$ 数量级，而一般场合下的数据都是小于 $10^9$ 的。 0x3f3f3f3f * 2 = 2122219134，无穷大相加依然不会溢出。 可以使用memset(array, 0x3f, sizeof(array))来为数组设初值为0x3f3f3f3f，因为这个数的每个字节都是0x3f。 负无穷大用 0xCFCFCFCF 比较好。","link":"/blog/DSA/INTMAXinCF/"},{"title":"如何优雅地报备出校","text":"贵校自今年上半年开始使用出校审批，每次出南二门拿外卖都要在小程序上报备爆肝114514小时写一个自动发请求报备的脚本，就可以每天自动报备了记录一下分析过程 笔者没阅读过这方面有关书籍，有错误之处请雅正 获取请求先进入贵校信息门户的办事大厅，点进出校报备，用edge浏览器的网络工具，把从进入报备页面开始的所有请求都抓下来。填一遍表并点完成备案，再点确定提交最后的请求，一直到提示成功。 数据分析拿到包后分析抓到的包，最后的一个请求显然是真正有用的，先用python的requests库模拟一下。 准备引入需要的包，再定义了一个函数，用来处理负载数据用 12345678910111213import jsonimport requestsimport datetimeimport time# 从body的url字符串中拿json数据def getJSONfrombody(str): body = {} kvpairs = str.split('&amp;') for kvpair in kvpairs: kv = kvpair.split('=') body[kv[0]] = kv[1] return body 修改表单数据在申请出校是要填很多表单，麻烦得很。为了方便地修改填报表单的信息，我把请求里的formData保存到了本地的json文件里运行时先从文件读到表单数据 12with open('../outWHUpost/json/formdata.json', 'r', encoding='utf8')as data: form_data = json.load(data) 读到数据后需要对其进行修改，因为审批报备的后端会校验出校的起止时间的日期，如果不是同一天就会拒绝，分析formData可知起止时间的日期是当天的零点的时间戳，所以只需要在函数运行时拿到当天零点的时间戳就好了。 12345678910111213# 将formdata的日期改为函数运行当天today = datetime.date.today()today_timestamp = int(time.mktime(today.timetuple()))form_data['_VAR_TODAY'] = str(today_timestamp)# formdata NOW改掉form_data['_VAR_NOW_MONTH'] = str(today.month)form_data['_VAR_NOW_DAY'] = str(today.day)form_data['_VAR_NOW'] = str(int(time.time()))# 还有2个时间戳要改为当日零点时间戳，类型为intform_data['fieldSQSJFrom'] = today_timestampform_data[&quot;fieldSQSJTo&quot;] = today_timestamp 接下来还要看另一个重要的数据：stepId，这个数据是标识我们发的这个出校请求的，之后查看审批成功的请求也是根据这个stepId来的，所以要从之前的请求里拿。 分析之前的请求，可以看到在第一个请求start里没有stepId，而到第二个render请求时负载里已经带上了stepId，而且此时的页面url也从开始的https://hall.whu.edu.cn/infoplus/form/XSCRSQ/start 重定向到了https://hall.whu.edu.cn/infoplus/form/3447974/render其中的数字就是本次报备的stepId XSCRSQ：学生出入申请，贵校特色拼音密码不得不品尝 为了测试直接把stepId复制过来，由于formData进行json化后不能根据key直接拿stepId，所以把stepId用变量存起来，后面body数据要用 123stepId=str(3447974)form_data['_VAR_STEP_NUMBER']=stepIdform_data=json.dumps(form_data) 请求头formdata处理完后准备请求需要的其他数据，cookie和user_agent从抓到的doAction里复制就行 1234567891011cookie='打野走位觉得离谱尊尼获加是你爸'user_agent='爸你是加获尼尊谱离得觉位走野打'headers = { 'Accept':'application/json, text/javascript, */*; q=0.01', &quot;Cookie&quot;:cookie, &quot;User-Agent&quot;:user_agent, 'Content-Type': 'application/x-www-form-urlencoded'}url = &quot;https://hall.whu.edu.cn/infoplus/interface/doAction&quot; 负载数据接下来是模拟发送请求的负载数据，在doAction的包里点击负载，然后查看源,由于负载带了formdata很长，需要先右键查看全部后复制下来。 我这里把body自带的formData删掉了，具体方法是编辑器里CTRL+F搜索&amp;remark然后往前拖选到&amp;formData，删除。其实不删也可以，反正后面会修改 12345678910# 从edge网络抓包拿到body的url编码，这里删掉fromdata，后续加我们自己的body='阿米浴说的道理一'# 先进行url解码body = requests.utils.unquote(body)# 从&amp;连接的参数中拿jsonbody = getJSONfrombody(body)body['timestamp']=str(int(time.time())) body['formData'] = form_databody['stepId']= stepId 发送请求 这一段是最后写的：我们之前的stepId是复制得到的，那么如何利用请求拿stepId呢？其实只需要先向start发一个post就好了 123456789101112&gt;start_data={}&gt;start_data['idc']='XSCRSQ'&gt;start_data['release']=''&gt;start_data['lang']='zh'&gt;start_data['formData']=form_datastart_res = requests.post('https://hall.whu.edu.cn/infoplus/interface/start',headers=headers,data=body)print(start_res.json())stepId_arr=start_res.json()['entities'][0].split('/')print(stepId_arr)stepId = stepId_arr[-2]print(stepId) 到这里就可以直接用request.post() 12res = requests.post(url=url,headers=headers,data=body)res.json() 出现问题'latin-1' codec can't encode characters in position 411-422: ordinal not in range(256)这个东西是由于中文和编码产生的，我没找到比较好的解决办法，最终选择了修改库函数根据报错信息找到python的文件夹下的\\Lib\\http\\clinent.py 把报错代码的latin-1改成utf-8 成功输出 12345678910111213141516171819202122{'errno': 0, 'ecode': 'SUCCEED', 'entities': [ { 'stepId': 3, 'name': '办结', 'code': 'autoStep1', 'status': 0, 'type': 'Auto', 'flowStepId': 0, 'executorSelection': 0, 'timestamp': 0, 'posts': [], 'users': [], 'parallel': False, 'hasInstantNotification': False, 'hasCarbonCopy': False, 'entryId': 2392035, 'entryStatus': 0, 'entryRelease': False }]}","link":"/blog/WsHitU/letMeOut/"},{"title":"osLabPKE","text":"配环境本环节的难点在于从给的三种配环境方式里选出最阳间的方式 Ubuntu 20.04 工程文件夹: /home/lkr/oslab 下载交叉编译器和执行环境解压 tar xf riscv64-elf-gcc-20210923.tgz 解压完成后，将在当前目录产生名为riscv64-elf-gcc的目录，该目录下包含RISC-V交叉编译器以及spike模拟器。 设置环境变量 12export RISCV=$PWD/riscv64-elf-gccexport PATH=$PATH:$RISCV/bin 将以上两个export命令，加入到/.bashrc，/.profile或 /etc/profile文件的末尾（注意替换$PWD环境变量）。 12pwd # 查看当前目录 这样，每次重新启动（并打开终端程序）后，系统会自动设置这两个环境变量，而不用每次都要手动输入以上命令。 下代码1234git clone https://gitee.com/hustos/riscv-pke.git# 查看文件结构cd riscv-pketree -L 3 环境验证 12makespike ./obj/riscv-pke ./obj/app_helloworld Lab1 系统调用sudo开启vscode，不安全但是方便 1sudo code --no-sandbox --user-data-dir=&quot;~/.vscode&quot; 失败 lab1_1做完执行 12make clean;makespike ./obj/riscv-pke ./obj/app_helloworld lab1_2 异常处理1234567# 切换到 lab1_2 # 继承 lab1_1的答案git checkout lab1_2_exceptiongit merge lab1_1_syscall -m &quot;continue to work on lab1_2&quot;# 重新构造 # 运行构造结果make clean; makespike ./obj/riscv-pke ./obj/app_illegal_instruction 做完提交 1git commit -a -m &quot;my work on lab1_2 is done.&quot; lab1_3123456# 切换到lab1_3git checkout lab1_3_irqgit merge lab1_2_exception -m &quot;continue to work on lab1_3&quot;make clean; makespike ./obj/riscv-pke ./obj/app_long_loop 做完提交 1git commit -a -m &quot;my work on lab1_3 is done.&quot; lab2lab2_1123456# 切换到lab2_1git checkout lab2_1_pagetablegit merge lab1_3_irq -m &quot;continue to work on lab2_1&quot;make clean; makespike ./obj/riscv-pke ./obj/app_helloworld_no_lds 做完提交 1git commit -a -m &quot;my work on lab2_1 is done.&quot; lab2_2123456# 切换到lab2_2git checkout lab2_2_allocatepagegit merge lab2_1_pagetable -m &quot;continue to work on lab2_2&quot;make clean; makespike ./obj/riscv-pke ./obj/app_naive_malloc 做完提交 1git commit -a -m &quot;my work on lab2_2 is done.&quot; lab2_3123456# 切换到lab2_3git checkout lab2_3_pagefaultgit merge lab2_2_allocatepage -m &quot;continue to work on lab2_3&quot;make clean; makespike ./obj/riscv-pke ./obj/app_sum_sequence 做完提交 1git commit -a -m &quot;my work on lab2_3 is done.&quot; Lab3 进程管理Lab3_1 进程创建12345git checkout lab3_1_forkgit merge lab2_3_pagefault -m &quot;continue to work on lab3_1&quot;make clean; makespike ./obj/riscv-pke ./obj/app_naive_fork 分析子进程child的代码段CODE_SEGEMENT逻辑地址映射到父进程代码段的物理地址 12345678910111213int map_pages(pagetable_t page_dir, uint64 va, uint64 size, uint64 pa, int perm) { uint64 first, last; pte_t *pte; for (first = ROUNDDOWN(va, PGSIZE), last = ROUNDDOWN(va + size - 1, PGSIZE); first &lt;= last; first += PGSIZE, pa += PGSIZE) { if ((pte = page_walk(page_dir, first, 1)) == 0) return -1; if (*pte &amp; PTE_V) panic(&quot;map_pages fails on mapping va (0x%lx) to pa (0x%lx)&quot;, first, pa); *pte = PA2PTE(pa) | perm | PTE_V; } return 0;} user_vm_map是对map_pages的封装 123456789101112131415161718192021222324252627282930313233343536pte_t *page_walk(pagetable_t page_dir, uint64 va, int alloc) { if (va &gt;= MAXVA) panic(&quot;page_walk&quot;); // starting from the page directory pagetable_t pt = page_dir; // traverse from page directory to page table. // as we use risc-v sv39 paging scheme, there will be 3 layers: page dir, // page medium dir, and page table. for (int level = 2; level &gt; 0; level--) { // macro &quot;PX&quot; gets the PTE index in page table of current level // &quot;pte&quot; points to the entry of current level pte_t *pte = pt + PX(level, va); // now, we need to know if above pte is valid (established mapping to phyiscal page) // or not. if (*pte &amp; PTE_V) { //PTE valid // phisical address of pagetable of next level pt = (pagetable_t)PTE2PA(*pte); } else { //PTE invalid (not exist). // allocate a page (to be the new pagetable), if alloc == 1 if( alloc &amp;&amp; ((pt = (pte_t *)alloc_page(1)) != 0) ){ memset(pt, 0, PGSIZE); // writes the physical address of newly allocated page to pte, to establish the // page table tree. *pte = PA2PTE(pt) | PTE_V; }else //returns NULL, if alloc == 0, or no more physical page remains return 0; } } // return a PTE which contains phisical address of a page return pt + PX(0, va);} 该函数的第一个输入参数page_dir为根目录所在物理页面的首地址，第二个参数va为所要查找（walk）的逻辑地址，第三个参数实际上是一个bool类型：当它为1时，如果它所要查找的逻辑地址并未建立与物理地址的映射（图4.1中的Page Medium Directory）不存在，则通过分配内存空间建立从根目录到页表的完整映射，并最终返回va所对应的页表项；当它为0时，如果它所要查找的逻辑地址并未建立与物理地址的映射，则返回NULL，否则返回va所对应的页表项。 看代码发现lab3-1新增了个打印debug的函数print_proc_vmspace 打印调试一下可以看到父子进程的代码段 pa是通过lookup利用进程的pagetable和mappedinfo的va得到的。 child的va在mapping之后才复制，那我们只需要修改他的pagetable即可，将代码段相关的pagetable修改 显然要用到lab2提到的user_vm_map ，逐个分析参数，第一个pagetable是被修改的，应该传入子线程的pagetable，va用父线程，因为后面 register vm 的时候将子进程的va赋值为父进程的va。pa显然也是父进程的，这里要用到lab2_1写的user_va_to_pa 函数。proctotype的最后一个参数应该是用户态，PGSIZE就是pagesize。 做完交一发 1git commit -a -m &quot;my work on lab3_1 is done.&quot; Lab3_2切换分支12345git checkout lab3_2_yieldgit merge lab3_1_fork -m &quot;continue to work on lab3_2&quot;make clean; makespike ./obj/riscv-pke ./obj/app_yield 分析太水了不分析了 做完交一发 1git commit -a -m &quot;my work on lab3_2 is done.&quot; Lab3_3切换分支12345git checkout lab3_3_rrschedgit merge lab3_2_yield -m &quot;continue to work on lab3_3&quot;make clean; makespike ./obj/riscv-pke ./obj/app_two_long_loops 做完交一发 1git commit -a -m &quot;my work on lab3_3 is DONE!!!&quot; 基础实验完成，待会肝挑战。","link":"/blog/OS/osLabPKE/"},{"title":"osPKElabChallenge","text":"CLab1_1 打印用户程序调用栈切换分支12git checkout lab1_challenge1_backtracegit merge lab1_3_irq -m &quot;continue to work on lab1_challenge1&quot; 分析在print_backtrace 中实现系统递归调用，根据depth逐级回溯调用路径先照着lab1_1给出的分析调用路径逐级在printu和exit下添加print_backtrace()相关代码 查看汇编 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367$ riscv64-unknown-elf-objdump -d obj/app_print_backtraceobj/app_print_backtrace: file format elf64-littleriscvDisassembly of section .text:0000000081000000 &lt;f8&gt;: 81000000: 1141 addi sp,sp,-16 81000002: e406 sd ra,8(sp) 81000004: e022 sd s0,0(sp) 81000006: 0800 addi s0,sp,16 81000008: 451d li a0,7 8100000a: 160000ef jal ra,8100016a &lt;print_backtrace&gt; 8100000e: 60a2 ld ra,8(sp) 81000010: 6402 ld s0,0(sp) 81000012: 0141 addi sp,sp,16 81000014: 8082 ret0000000081000016 &lt;f7&gt;: 81000016: 1141 addi sp,sp,-16 81000018: e406 sd ra,8(sp) 8100001a: e022 sd s0,0(sp) 8100001c: 0800 addi s0,sp,16 8100001e: fe3ff0ef jal ra,81000000 &lt;f8&gt; 81000022: 60a2 ld ra,8(sp) 81000024: 6402 ld s0,0(sp) 81000026: 0141 addi sp,sp,16 81000028: 8082 ret000000008100002a &lt;f6&gt;: 8100002a: 1141 addi sp,sp,-16 8100002c: e406 sd ra,8(sp) 8100002e: e022 sd s0,0(sp) 81000030: 0800 addi s0,sp,16 81000032: fe5ff0ef jal ra,81000016 &lt;f7&gt; 81000036: 60a2 ld ra,8(sp) 81000038: 6402 ld s0,0(sp) 8100003a: 0141 addi sp,sp,16 8100003c: 8082 ret000000008100003e &lt;f5&gt;: 8100003e: 1141 addi sp,sp,-16 81000040: e406 sd ra,8(sp) 81000042: e022 sd s0,0(sp) 81000044: 0800 addi s0,sp,16 81000046: fe5ff0ef jal ra,8100002a &lt;f6&gt; 8100004a: 60a2 ld ra,8(sp) 8100004c: 6402 ld s0,0(sp) 8100004e: 0141 addi sp,sp,16 81000050: 8082 ret0000000081000052 &lt;f4&gt;: 81000052: 1141 addi sp,sp,-16 81000054: e406 sd ra,8(sp) 81000056: e022 sd s0,0(sp) 81000058: 0800 addi s0,sp,16 8100005a: fe5ff0ef jal ra,8100003e &lt;f5&gt; 8100005e: 60a2 ld ra,8(sp) 81000060: 6402 ld s0,0(sp) 81000062: 0141 addi sp,sp,16 81000064: 8082 ret0000000081000066 &lt;f3&gt;: 81000066: 1141 addi sp,sp,-16 81000068: e406 sd ra,8(sp) 8100006a: e022 sd s0,0(sp) 8100006c: 0800 addi s0,sp,16 8100006e: fe5ff0ef jal ra,81000052 &lt;f4&gt; 81000072: 60a2 ld ra,8(sp) 81000074: 6402 ld s0,0(sp) 81000076: 0141 addi sp,sp,16 81000078: 8082 ret000000008100007a &lt;f2&gt;: 8100007a: 1141 addi sp,sp,-16 8100007c: e406 sd ra,8(sp) 8100007e: e022 sd s0,0(sp) 81000080: 0800 addi s0,sp,16 81000082: fe5ff0ef jal ra,81000066 &lt;f3&gt; 81000086: 60a2 ld ra,8(sp) 81000088: 6402 ld s0,0(sp) 8100008a: 0141 addi sp,sp,16 8100008c: 8082 ret000000008100008e &lt;f1&gt;: 8100008e: 1141 addi sp,sp,-16 81000090: e406 sd ra,8(sp) 81000092: e022 sd s0,0(sp) 81000094: 0800 addi s0,sp,16 81000096: fe5ff0ef jal ra,8100007a &lt;f2&gt; 8100009a: 60a2 ld ra,8(sp) 8100009c: 6402 ld s0,0(sp) 8100009e: 0141 addi sp,sp,16 810000a0: 8082 ret00000000810000a2 &lt;main&gt;: 810000a2: 1141 addi sp,sp,-16 810000a4: e406 sd ra,8(sp) 810000a6: e022 sd s0,0(sp) 810000a8: 0800 addi s0,sp,16 810000aa: 00000517 auipc a0,0x0 810000ae: 2de50513 addi a0,a0,734 # 81000388 &lt;vsnprintf+0x202&gt; 810000b2: 030000ef jal ra,810000e2 &lt;printu&gt; 810000b6: fd9ff0ef jal ra,8100008e &lt;f1&gt; 810000ba: 4501 li a0,0 810000bc: 088000ef jal ra,81000144 &lt;exit&gt; 810000c0: 4501 li a0,0 810000c2: 60a2 ld ra,8(sp) 810000c4: 6402 ld s0,0(sp) 810000c6: 0141 addi sp,sp,16 810000c8: 8082 ret00000000810000ca &lt;do_user_call&gt;: 810000ca: 1101 addi sp,sp,-32 810000cc: ec22 sd s0,24(sp) 810000ce: 1000 addi s0,sp,32 810000d0: 00000073 ecall 810000d4: fea42623 sw a0,-20(s0) 810000d8: fec42503 lw a0,-20(s0) 810000dc: 6462 ld s0,24(sp) 810000de: 6105 addi sp,sp,32 810000e0: 8082 ret00000000810000e2 &lt;printu&gt;: 810000e2: 710d addi sp,sp,-352 810000e4: ee06 sd ra,280(sp) 810000e6: ea22 sd s0,272(sp) 810000e8: 1200 addi s0,sp,288 810000ea: e40c sd a1,8(s0) 810000ec: e810 sd a2,16(s0) 810000ee: ec14 sd a3,24(s0) 810000f0: f018 sd a4,32(s0) 810000f2: f41c sd a5,40(s0) 810000f4: 03043823 sd a6,48(s0) 810000f8: 03143c23 sd a7,56(s0) 810000fc: 00840693 addi a3,s0,8 81000100: fed43423 sd a3,-24(s0) 81000104: 862a mv a2,a0 81000106: 10000593 li a1,256 8100010a: ee840513 addi a0,s0,-280 8100010e: 078000ef jal ra,81000186 &lt;vsnprintf&gt; 81000112: 0005071b sext.w a4,a0 81000116: 0ff00793 li a5,255 8100011a: 02e7e263 bltu a5,a4,8100013e &lt;printu+0x5c&gt; 8100011e: 862a mv a2,a0 81000120: 4881 li a7,0 81000122: 4801 li a6,0 81000124: 4781 li a5,0 81000126: 4701 li a4,0 81000128: 4681 li a3,0 8100012a: ee840593 addi a1,s0,-280 8100012e: 04000513 li a0,64 81000132: f99ff0ef jal ra,810000ca &lt;do_user_call&gt; 81000136: 60f2 ld ra,280(sp) 81000138: 6452 ld s0,272(sp) 8100013a: 6135 addi sp,sp,352 8100013c: 8082 ret 8100013e: 10000613 li a2,256 81000142: bff9 j 81000120 &lt;printu+0x3e&gt;0000000081000144 &lt;exit&gt;: 81000144: 1141 addi sp,sp,-16 81000146: e406 sd ra,8(sp) 81000148: e022 sd s0,0(sp) 8100014a: 0800 addi s0,sp,16 8100014c: 85aa mv a1,a0 8100014e: 4881 li a7,0 81000150: 4801 li a6,0 81000152: 4781 li a5,0 81000154: 4701 li a4,0 81000156: 4681 li a3,0 81000158: 4601 li a2,0 8100015a: 04100513 li a0,65 8100015e: f6dff0ef jal ra,810000ca &lt;do_user_call&gt; 81000162: 60a2 ld ra,8(sp) 81000164: 6402 ld s0,0(sp) 81000166: 0141 addi sp,sp,16 81000168: 8082 ret000000008100016a &lt;print_backtrace&gt;: 8100016a: 1141 addi sp,sp,-16 8100016c: e406 sd ra,8(sp) 8100016e: e022 sd s0,0(sp) 81000170: 0800 addi s0,sp,16 81000172: 00000517 auipc a0,0x0 81000176: 24650513 addi a0,a0,582 # 810003b8 &lt;vsnprintf+0x232&gt; 8100017a: f69ff0ef jal ra,810000e2 &lt;printu&gt; 8100017e: 60a2 ld ra,8(sp) 81000180: 6402 ld s0,0(sp) 81000182: 0141 addi sp,sp,16 81000184: 8082 ret0000000081000186 &lt;vsnprintf&gt;: 81000186: 1101 addi sp,sp,-32 81000188: ec22 sd s0,24(sp) 8100018a: 1000 addi s0,sp,32 8100018c: fed43423 sd a3,-24(s0) 81000190: 4781 li a5,0 81000192: 4301 li t1,0 81000194: 4681 li a3,0 81000196: a255 j 8100033a &lt;vsnprintf+0x1b4&gt; 81000198: 00178713 addi a4,a5,1 8100019c: 00b77863 bgeu a4,a1,810001ac &lt;vsnprintf+0x26&gt; 810001a0: 00f50833 add a6,a0,a5 810001a4: 03000893 li a7,48 810001a8: 01180023 sb a7,0(a6) 810001ac: 0789 addi a5,a5,2 810001ae: 00b7f763 bgeu a5,a1,810001bc &lt;vsnprintf+0x36&gt; 810001b2: 972a add a4,a4,a0 810001b4: 07800813 li a6,120 810001b8: 01070023 sb a6,0(a4) 810001bc: fe843703 ld a4,-24(s0) 810001c0: 00870813 addi a6,a4,8 810001c4: ff043423 sd a6,-24(s0) 810001c8: 00073883 ld a7,0(a4) 810001cc: eaa9 bnez a3,8100021e &lt;vsnprintf+0x98&gt; 810001ce: 469d li a3,7 810001d0: a035 j 810001fc &lt;vsnprintf+0x76&gt; 810001d2: 00030463 beqz t1,810001da &lt;vsnprintf+0x54&gt; 810001d6: 869a mv a3,t1 810001d8: b7d5 j 810001bc &lt;vsnprintf+0x36&gt; 810001da: fe843703 ld a4,-24(s0) 810001de: 00870693 addi a3,a4,8 810001e2: fed43423 sd a3,-24(s0) 810001e6: 00072883 lw a7,0(a4) 810001ea: 869a mv a3,t1 810001ec: b7c5 j 810001cc &lt;vsnprintf+0x46&gt; 810001ee: 05770713 addi a4,a4,87 810001f2: 97aa add a5,a5,a0 810001f4: 00e78023 sb a4,0(a5) 810001f8: 36fd addiw a3,a3,-1 810001fa: 87c2 mv a5,a6 810001fc: 0206c363 bltz a3,81000222 &lt;vsnprintf+0x9c&gt; 81000200: 0026971b slliw a4,a3,0x2 81000204: 40e8d733 sra a4,a7,a4 81000208: 8b3d andi a4,a4,15 8100020a: 00178813 addi a6,a5,1 8100020e: feb875e3 bgeu a6,a1,810001f8 &lt;vsnprintf+0x72&gt; 81000212: 4325 li t1,9 81000214: fce34de3 blt t1,a4,810001ee &lt;vsnprintf+0x68&gt; 81000218: 03070713 addi a4,a4,48 8100021c: bfd9 j 810001f2 &lt;vsnprintf+0x6c&gt; 8100021e: 46bd li a3,15 81000220: bff1 j 810001fc &lt;vsnprintf+0x76&gt; 81000222: 4301 li t1,0 81000224: 4681 li a3,0 81000226: aa09 j 81000338 &lt;vsnprintf+0x1b2&gt; 81000228: 00030f63 beqz t1,81000246 &lt;vsnprintf+0xc0&gt; 8100022c: fe843703 ld a4,-24(s0) 81000230: 00870693 addi a3,a4,8 81000234: fed43423 sd a3,-24(s0) 81000238: 00073883 ld a7,0(a4) 8100023c: 0008ce63 bltz a7,81000258 &lt;vsnprintf+0xd2&gt; 81000240: 8746 mv a4,a7 81000242: 4305 li t1,1 81000244: a815 j 81000278 &lt;vsnprintf+0xf2&gt; 81000246: fe843703 ld a4,-24(s0) 8100024a: 00870693 addi a3,a4,8 8100024e: fed43423 sd a3,-24(s0) 81000252: 00072883 lw a7,0(a4) 81000256: b7dd j 8100023c &lt;vsnprintf+0xb6&gt; 81000258: 411008b3 neg a7,a7 8100025c: 00178713 addi a4,a5,1 81000260: 00b77963 bgeu a4,a1,81000272 &lt;vsnprintf+0xec&gt; 81000264: 97aa add a5,a5,a0 81000266: 02d00693 li a3,45 8100026a: 00d78023 sb a3,0(a5) 8100026e: 87ba mv a5,a4 81000270: bfc1 j 81000240 &lt;vsnprintf+0xba&gt; 81000272: 87ba mv a5,a4 81000274: b7f1 j 81000240 &lt;vsnprintf+0xba&gt; 81000276: 0305 addi t1,t1,1 81000278: 46a9 li a3,10 8100027a: 02d74733 div a4,a4,a3 8100027e: ff65 bnez a4,81000276 &lt;vsnprintf+0xf0&gt; 81000280: fff3071b addiw a4,t1,-1 81000284: a029 j 8100028e &lt;vsnprintf+0x108&gt; 81000286: 46a9 li a3,10 81000288: 02d8c8b3 div a7,a7,a3 8100028c: 377d addiw a4,a4,-1 8100028e: 02074163 bltz a4,810002b0 &lt;vsnprintf+0x12a&gt; 81000292: 00f706b3 add a3,a4,a5 81000296: 00168813 addi a6,a3,1 8100029a: feb876e3 bgeu a6,a1,81000286 &lt;vsnprintf+0x100&gt; 8100029e: 4829 li a6,10 810002a0: 0308e833 rem a6,a7,a6 810002a4: 96aa add a3,a3,a0 810002a6: 0308081b addiw a6,a6,48 810002aa: 01068023 sb a6,0(a3) 810002ae: bfe1 j 81000286 &lt;vsnprintf+0x100&gt; 810002b0: 979a add a5,a5,t1 810002b2: 4301 li t1,0 810002b4: 4681 li a3,0 810002b6: a049 j 81000338 &lt;vsnprintf+0x1b2&gt; 810002b8: fe843703 ld a4,-24(s0) 810002bc: 00870693 addi a3,a4,8 810002c0: fed43423 sd a3,-24(s0) 810002c4: 6318 ld a4,0(a4) 810002c6: a019 j 810002cc &lt;vsnprintf+0x146&gt; 810002c8: 0705 addi a4,a4,1 810002ca: 87b6 mv a5,a3 810002cc: 00074803 lbu a6,0(a4) 810002d0: 00080a63 beqz a6,810002e4 &lt;vsnprintf+0x15e&gt; 810002d4: 00178693 addi a3,a5,1 810002d8: feb6f8e3 bgeu a3,a1,810002c8 &lt;vsnprintf+0x142&gt; 810002dc: 97aa add a5,a5,a0 810002de: 01078023 sb a6,0(a5) 810002e2: b7dd j 810002c8 &lt;vsnprintf+0x142&gt; 810002e4: 4301 li t1,0 810002e6: 4681 li a3,0 810002e8: a881 j 81000338 &lt;vsnprintf+0x1b2&gt; 810002ea: 00178713 addi a4,a5,1 810002ee: 04b77063 bgeu a4,a1,8100032e &lt;vsnprintf+0x1a8&gt; 810002f2: fe843683 ld a3,-24(s0) 810002f6: 00868813 addi a6,a3,8 810002fa: ff043423 sd a6,-24(s0) 810002fe: 97aa add a5,a5,a0 81000300: 0006c683 lbu a3,0(a3) 81000304: 00d78023 sb a3,0(a5) 81000308: 87ba mv a5,a4 8100030a: 4301 li t1,0 8100030c: 4681 li a3,0 8100030e: a02d j 81000338 &lt;vsnprintf+0x1b2&gt; 81000310: 02500813 li a6,37 81000314: 03070163 beq a4,a6,81000336 &lt;vsnprintf+0x1b0&gt; 81000318: 00178813 addi a6,a5,1 8100031c: 04b87463 bgeu a6,a1,81000364 &lt;vsnprintf+0x1de&gt; 81000320: 97aa add a5,a5,a0 81000322: 00e78023 sb a4,0(a5) 81000326: 87c2 mv a5,a6 81000328: a801 j 81000338 &lt;vsnprintf+0x1b2&gt; 8100032a: 8336 mv t1,a3 8100032c: a031 j 81000338 &lt;vsnprintf+0x1b2&gt; 8100032e: 87ba mv a5,a4 81000330: 4301 li t1,0 81000332: 4681 li a3,0 81000334: a011 j 81000338 &lt;vsnprintf+0x1b2&gt; 81000336: 4685 li a3,1 81000338: 0605 addi a2,a2,1 8100033a: 00064703 lbu a4,0(a2) 8100033e: c70d beqz a4,81000368 &lt;vsnprintf+0x1e2&gt; 81000340: dae1 beqz a3,81000310 &lt;vsnprintf+0x18a&gt; 81000342: f9d7071b addiw a4,a4,-99 81000346: 0ff77893 zext.b a7,a4 8100034a: 4855 li a6,21 8100034c: ff1866e3 bltu a6,a7,81000338 &lt;vsnprintf+0x1b2&gt; 81000350: 00289713 slli a4,a7,0x2 81000354: 00000817 auipc a6,0x0 81000358: 07080813 addi a6,a6,112 # 810003c4 &lt;vsnprintf+0x23e&gt; 8100035c: 9742 add a4,a4,a6 8100035e: 4318 lw a4,0(a4) 81000360: 9742 add a4,a4,a6 81000362: 8702 jr a4 81000364: 87c2 mv a5,a6 81000366: bfc9 j 81000338 &lt;vsnprintf+0x1b2&gt; 81000368: 00b7fa63 bgeu a5,a1,8100037c &lt;vsnprintf+0x1f6&gt; 8100036c: 953e add a0,a0,a5 8100036e: 00050023 sb zero,0(a0) 81000372: 0007851b sext.w a0,a5 81000376: 6462 ld s0,24(sp) 81000378: 6105 addi sp,sp,32 8100037a: 8082 ret 8100037c: d9fd beqz a1,81000372 &lt;vsnprintf+0x1ec&gt; 8100037e: 15fd addi a1,a1,-1 81000380: 952e add a0,a0,a1 81000382: 00050023 sb zero,0(a0) 81000386: b7f5 j 81000372 &lt;vsnprintf+0x1ec&gt;","link":"/blog/OS/osPKElabChallenge/"}],"tags":[{"name":"record","slug":"record","link":"/blog/tags/record/"},{"name":"Lab","slug":"Lab","link":"/blog/tags/Lab/"},{"name":"cpp","slug":"cpp","link":"/blog/tags/cpp/"},{"name":"code","slug":"code","link":"/blog/tags/code/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"requests","slug":"requests","link":"/blog/tags/requests/"}],"categories":[{"name":"Blog","slug":"Blog","link":"/blog/categories/Blog/"},{"name":"frontend","slug":"frontend","link":"/blog/categories/frontend/"},{"name":"vue","slug":"frontend/vue","link":"/blog/categories/frontend/vue/"},{"name":"OS","slug":"OS","link":"/blog/categories/OS/"},{"name":"language","slug":"language","link":"/blog/categories/language/"},{"name":"DSA","slug":"DSA","link":"/blog/categories/DSA/"},{"name":"WsHitU","slug":"WsHitU","link":"/blog/categories/WsHitU/"}]}